fun main() {

    var a:Int = 0 //자료형선언
    var x:Int? = null //null이 가능한 자료형

    var charValue:Char = 'a'

    val msg =  """
        ddddddd
        sdssds
        dssds""" // " 3개는 띄어쓰기가능

    var aa:Int = 1

    var bb:Long = aa.toLong() // 형변환

    var intArray = arrayOf(1,2,2,3,4,5)//배열선언

    var intaa = arrayOfNulls<Int>(100)//제너릭을 활용한 선언



    println(add(2,1,5))
    println(doWhen("DD"))

    main2()
    
    //인스턴스란 클래스를 활용해 객체로 선언하는것
    //클래스는 인스턴스를 만들기 위한 틀
    //인스턴스는 실제 객체화된 객체
    //클래스 > 인스턴스
    //JAVA에서는 New를 사용해 클래스를 활용한 인스턴스화를 했었음
    var q = Person("YD" , 20)
    var qq = Person("GD" , 31)
    var qqq = Person("CYD" , 41)

    var xx = Person("QQDD")
    var xxx = Person("RRD")
    var xxxx = Person("TTDD")

    //q.introduce()
    //qq.introduce()
    //qqq.introduce()

    var y = Animal("덕배", 5, "강아지")
    var yy = Dog("덕배", 5)

    y.intr()
    yy.intr()
    yy.wal()




}

fun add(a: Int,b:Int , c:Int): String {

    if (a> 10){
        a is Int
        return "Y"

    }else{
        return "N"
    }
}

fun add2(a:Int,b:Int,c:Int) = a+b+c

fun doWhen(a: Any){
    when(a){
        1 -> println("정수입니다")
        "DD" -> println("스트링")
        is Long -> println("long")
        !is String -> println("2222----")
        else -> return
    }
}

fun main2()
{
    var a = 0

    while (a < 5)
    {
        println(++a)
    }

    for (i in 9 downTo  1 step 2) {
        println(i)
    }


}

fun multi(){
    loop@for( i in 1..10 step 2){
        continue@loop
    }

}


//클래스와 생성자와 보조생성자
class Person(var name:String , val age:Int)
{
   //fun introduce(){
    //    println("안녕나는 ${age}살 ${name} 야")
   // }

    init{
        println("안녕나는 ${age}살 ${name} 야")
    }


    //보조생성자는 기본생성자와 다른 생성자, 인스턴스 생성시 편의를 제공
    //예를 들어 나이가 1997인사람이 100명이 있으면
    //100번 초기화하는건 비효율적이니까
    //보조생성자를 통해 도와줌
    //보조생성자를 생성할떄는 반드시 기본생성자를 통해 속성 초기화 필요
    //왜냐면 보조인애는 말그대로 보조인 역할임
    //아래의 형태를 보면
    //보조생성자(보조로 쓸 속성) : this 다옴표+this로 기본생성자와 연결해주고
    //기본생성자에서 도움을 받을 속성을 선언함
    //여기서는 1997을 선언했음, 이름은 받은그대로 , 이름은 1997 고정
    constructor(name: String):this(name , 41){
        println("보조생성자 입니다.")
    }



}
open class Animal(var name:String, var age:Int , var type:String)
{
    fun intr(){
        println("안녕나는 ${type} ${name}이고 ${age}살이야.")
    }
}


//var , val 을 붙이면 클래스에 종속되는 속성이고
//안붙이면 그냥 받는 인수로 인식함
//클래스의 상속은 뒤에 : 을 붙이고 슈퍼클래스에 넘겨줄값
//그럼 Dog 클래쓰는 이름과 나이만 가지고 슈퍼클래스에서 상속받은 type:강아지가 나온다
//
class Dog(name:String, age: Int) : Animal(name,age,"강아지")
{
    fun wal()
    {
        println("왈왈")
    }
}

abstract class funn (){
    abstract fun eat()
    fun sat(){
        println("킁킁")
    }
}

class RO : funn(){
    override fun eat() {
       println("토끼")
    }
}

//추상화와 인터페이스
//코트린에서는 abstract 를 앞에 붙여 추상화 함수를 만들고
//이를 상속받아 함수 구현부를 만든다

//추상화는 미완성 클래쓰 이므로 단독으로는 인스턴스를 만들수없다
//인터페이스는 여러 클래스를 상속할수있다

interface qwerty{
    fun www()
    fun eee()
}

interface qwerww {
    fun wq() {
        println("멍멍")
    }
}

class qqdogg : qwerty ,qwerww{
    override fun www() {
        println("WWEWEWEWE");
    }

    override fun eee() {
        println(":::::")
    }

    override fun wq() {
        super.wq()

    }
}

/*
* 오버라이딩은 이미 구현이 끝난 함수의 기능을 서브클래스에서 변경해야할때
* 추상화는 형식만 선언하고 실제 구현은 서브클래스에 일임할때 사용
* 인터페이스는 서로 다른 기능들을 여러개 물려주어야할떄 유용한 기능
* 추상화와 인터페이스의 차이점
* */

/*
* 패키지 스코프 > 클래스 스코프 > 함수 스코프
* 등등 레벨의 단위에 따라 변수를 선언할 수 있다
* */


/*
* 변수선언시 접근범위 및 접근제한자
* ====패키지 단위에서는=======
* public 기본값이고 어떤 패키지에서도 접근가능
* internal 같은모듈에서만 가능
* private 같은 파일 내에서만 가능
*
* ====클래쓰 단위에서는===
* public 클래스 외부에서가능
* private 클래스 내부에서만 가능
* protected 클래스 자신과 상속받은 클래스에서만 가능
* */

/*
* 고차함수와 람다함수
* b(::a)
* 람다 ->
* */


/*
* 람다는 파라미터없이 사용가능, 입력없이 출력만 가능
* 파라미터가 하나면 it 사용, it이 이 하나르 매핑해줌
* 클래스에서 생성한 인스턴스를 스코프함수에 포함 시킬수잇음
*
* =====스코프함수의 종류======
* apply -> 초기화 함수
*run ->
*
*
* */
val c: (String)-> Unit = {str -> println("람다함수") }


class book(var name:String, var price:Int)
{
    fun discount(){
        price -= 20000
    }

}
